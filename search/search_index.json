{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Your Michelle's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting Up A Dev Container For Rust","text":"<ul> <li>Primary author: Michelle Jon</li> </ul> <p>Welcome! In this tutorial, you'll learn how to create a new dev container for Rust. By the end of this guide, you'll set up a Rust development container (dev container) in Visual Studio Code (VS Code).</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure to have the following:</p> <ul> <li>GitHub account</li> <li>Git installed</li> <li>Visual Studio Code (VS Code)</li> <li>Docker installed</li> </ul>"},{"location":"tutorials/rust-setup/#creating-the-repository-create-a-local-directory-and-initialize-git","title":"Creating the Repository: Create a Local Directory and Initialize Git","text":"<ol> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Create a new directory for your project.     <pre><code>mkdir &lt;name of your repository&gt;\ncd &lt;name of your repository&gt;\n</code></pre></p> </li> <li>Initialize a new Git repository:     <pre><code>git init\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#add-development-container-configuration","title":"Add Development Container Configuration","text":"<ol> <li> <p>In VS Code, open the directory. You can do this via: File &gt; Open Folder.</p> </li> <li> <p>Install the Dev Containers extension for VS Code. Be sure the Dev Container installs the official rust-analyzer VSCode plugin by the Rust Programming Language Group.</p> </li> <li> <p>Create a <code>.devcontainer</code> directory in the root of your project.      <pre><code>mkdir .devcontainer\n</code></pre></p> </li> <li>Create a file <code>devcontainer.json</code> inside of the configuration directory <code>.devcontainer</code> <pre><code>touch .devcontainer/devcontainer.json\n</code></pre></li> <li>Add the code below to the file. Dev container should use a base image from Microsoft.     <pre><code>{\n    \"name\": \"Rust Development Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#start-your-environment","title":"Start your environment","text":"<ol> <li> <p>Open your directory where you configured your Dev Container in VS Code.</p> </li> <li> <p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac).</p> </li> <li> <p>Type in <code>Dev Containers: Reopen in Container</code> and select the option. This may take a few minutes while the image is downloaded and the requirements are installed.</p> </li> <li> <p>Once your dev container setup completes, close the current terminal tab and open a new terminal pane within VSCode.</p> </li> <li> <p>Try running <code>rustc --version</code> to make sure your dev container is running a recent version of rust.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#create-a-new-rust-project","title":"Create a New Rust Project","text":"<ol> <li> <p>Use cargo new to create a binary project by running the following command in the terminal: <pre><code>cargo new my_rust_project --vcs none\n</code></pre> This will create a new folder named <code>my_rust_project</code> without initializing a Git repository that includes folders <code>Cargo.toml</code> and <code>src</code> with the file <code>main.rs</code> inside.</p> </li> <li> <p>To create a basic \"Hello, world!\" program, add the following content inside main.rs. <pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#build-and-run-the-rust-project","title":"Build and Run the Rust Project","text":"<ol> <li> <p>Navigate to the project folder by running: <pre><code>cd my_rust_project\n</code></pre></p> </li> <li> <p>Run the build command: <pre><code>cargo build\n</code></pre> This compiles the code and produces an executable file in the target/debug folder.</p> </li> <li> <p>Run the built file by typing:     <pre><code>./target/debug/my_rust_project\n</code></pre></p> <p>This will output: <pre><code>Hello COMP423!\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#run-the-project-using-cargo-run","title":"Run the Project Using cargo run","text":"<ol> <li> <p>You can also use cargo run:</p> <p><pre><code>cargo run\n</code></pre> This command builds the project and runs the executable in one step. You\u2019ll see: <pre><code>Hello COMP423!\n</code></pre></p> </li> </ol> <p>Info</p> <p>The difference between cargo build and cargo run is that cargo build only compiles the code, while cargo run combines the steps. It compiles and executes the program.</p>"}]}